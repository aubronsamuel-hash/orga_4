name: backend-tests
on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_tests.yml'
jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Locate init_repo.ps1
        id: find_init
        shell: bash
        run: |
          set -euo pipefail
          echo "Workspace: $GITHUB_WORKSPACE"
          # Lister pour debug
          ls -la
          # Trouver un chemin de type */PS1/init_repo.ps1 versionnee par git
          FOUND="$(git ls-files | grep -E '(^|/)PS1/init_repo\.ps1$' || true)"
          if [ -n "$FOUND" ]; then
            echo "Found: $FOUND"
            echo "init=$FOUND" >> "$GITHUB_OUTPUT"
          else
            echo "No PS1/init_repo.ps1 found. Skipping."
            echo "init=" >> "$GITHUB_OUTPUT"
          fi

      - name: Run init_repo.ps1
        if: ${{ steps.find_init.outputs.init != '' }}
        shell: pwsh
        run: |
          $path = Join-Path "${{ github.workspace }}" "${{ steps.find_init.outputs.init }}"
          Write-Host "Running $path -Verbose"
          # Normaliser eventuelles fins de lignes CRLF/LF si besoin:
          # (Get-Content -Raw $path) -replace "`r`n","`n" | Set-Content -NoNewline $path
          & $path -Verbose
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: "${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}"
      - name: Run pytest
        working-directory: backend
        run: |
          pip install -r requirements-dev.txt || pip install -r requirements.txt || true
          pip install pytest pytest-cov pytest-xdist httpx || true
          pytest -n auto --cov=app --cov-report=term-missing --cov-report=xml:coverage.xml --junitxml=pytest-junit.xml --cov-fail-under=90
      - name: Generate coverage badge
        run: |
          python - << 'PY'
          import re, sys, json, pathlib
          p = pathlib.Path("backend/coverage.xml")
          txt = p.read_text(encoding="utf-8")
          m = re.search(r'line-rate="([0-9.]+)"', txt)
          rate = float(m.group(1)) if m else 0.0
          pct = int(round(rate * 100))
          color = "red" if pct < 60 else "yellow" if pct < 80 else "brightgreen"
          svg = f'<svg xmlns="http://www.w3.org/2000/svg" width="110" height="20"><rect width="110" height="20" fill="#555"/><rect x="60" width="50" height="20" fill="{color}"/><g fill="#fff" font-family="Verdana" font-size="11"><text x="5" y="14">coverage</text><text x="65" y="14">{pct}%</text></g></svg>'
          out = pathlib.Path("backend/coverage-badge.svg")
          out.write_text(svg, encoding="utf-8")
          print(pct)
          PY
      - name: Upload junit
        uses: actions/upload-artifact@v4
        with:
          name: backend-junit
          path: backend/pytest-junit.xml
      - name: Upload coverage xml
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-xml
          path: backend/coverage.xml
      - name: Upload coverage badge
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-badge
          path: backend/coverage-badge.svg
